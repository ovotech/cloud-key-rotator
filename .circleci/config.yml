aliases:
  - &docker-image
    docker:
      - image: google/cloud-sdk
  - &init-credentials
    run:
      name: Get credentials
      command: |
        echo $GCLOUD_SERVICE_KEY | base64 -d | gcloud auth activate-service-account --key-file=-
  - &deploy-cloudfunction
    run:
      name: Deploy GCP Cloudfunction
      command: |
        export RAND_SUFFIX=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 8 ; echo '')
        gcloud functions deploy ckr-dummy-$RAND_SUFFIX \
        --region europe-west1 \
        --entry-point Request \
        --runtime go116 \
        --trigger-http \
        --project pe-dev-185509
        gcloud functions delete ckr-dummy-$RAND_SUFFIX \
        --region europe-west1 \
        --project pe-dev-185509 \
        --quiet

defaults: &defaults
  working_directory: /go/src/github.com/ovotech/cloud-key-rotator

version: 2.1

orbs:
  terraform: ovotech/terraform-v2@2

jobs:
  goreleaser:
    <<: *defaults

    docker:
      - image: circleci/golang:1.16

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
           name: goreleaser
           command: |
             echo $DOCKER_PASS | docker login -u=$DOCKER_USER --password-stdin
             curl -sL https://git.io/goreleaser | VERSION=v0.116.0 bash
  release_cloudfunction_zip:
    docker:
      - image: cibuilds/github
    steps:
      - checkout
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=$(echo ${CIRCLE_TAG} | sed 's/^v//')
            ZIP_NAME=cloud-key-rotator_${VERSION}_cloudfunction.zip
            zip -R ${ZIP_NAME} '*.go' 'go.mod'
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG} ${ZIP_NAME}
  publish_tf_lambda_zip:
    docker:
      - image: python:3
    steps:
      - checkout
      - run:
          name: publish
          command: |
            VERSION=$(echo ${CIRCLE_TAG} | sed 's/^v//')
            TARGET_FILE=cloud-key-rotator_${VERSION}_lambda.zip
            curl -L https://github.com/ovotech/cloud-key-rotator/releases/download/v${VERSION}/${TARGET_FILE} -O
            pip3 install awscli
            aws s3 cp $TARGET_FILE s3://ckr-terraform-module-code --acl public-read
            # publish source to bucket in ap-southeast-2 so cloud-key-rotator can be used in that region
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD_ENG
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD_ENG
            aws s3 cp $TARGET_FILE s3://ckr-terraform-module-code-ap-southeast-2 --acl public-read
  tf_check_aws:
    executor: terraform/default
    steps:
    - checkout
    - terraform/fmt-check:
        path: tf_module/ckr_aws
    # Not running validate for AWS as the AWS provider requires
    # a region to be set in order for the config to be valid. We
    # don't want to provide a region because the upstream caller
    # of the module needs to do that.

  tf_check_gcp:
    executor: terraform/default
    steps:
    - checkout
    - terraform/fmt-check:
        path: tf_module/ckr_gcp
    - terraform/validate:
        path: tf_module/ckr_gcp

  publish_aws_tf_module:
    executor: terraform/default
    steps:
    - checkout
    - run:
        name: check_existing_version
        command: |
          .circleci/check_tf_module_versions.sh "$(<tf_module/ckr_aws/module_version.txt)" "pe/ckr/aws"
    - terraform/publish-module:
          path: tf_module/ckr_aws
          module_name: pe/ckr/aws
          version_file_path: tf_module/ckr_aws/module_version.txt

  publish_gcp_tf_module:
    executor: terraform/default
    steps:
    - checkout
    - run:
        name: check_existing_version
        command: |
          .circleci/check_tf_module_versions.sh "$(<tf_module/ckr_gcp/module_version.txt)" "pe/ckr/gcp"
    - terraform/publish-module:
          path: tf_module/ckr_gcp
          module_name: pe/ckr/gcp
          version_file_path: tf_module/ckr_gcp/module_version.txt

  go_fmt:
    <<: *defaults

    docker:
      - image: eversc/go-pr-checks:1.16

    steps:
      - checkout

      - run:
           name: ensure gofmt
           command: |
             test -z $(gofmt -s -l $(find . -iname '*.go' -type f | grep -v /vendor/))
  go_vet:
    <<: *defaults

    docker:
      - image: eversc/go-pr-checks:1.16

    steps:
      - checkout

      - run:
           name: go vet
           command: |
             export GO111MODULE=on
             go mod download
             go vet ./...

  go_cyclo:
    <<: *defaults

    docker:
      - image: eversc/go-pr-checks:1.16

    steps:
      - checkout

      - run:
           name: go_cyclo
           command: gocyclo -over 6 cmd

  go_lint:
    <<: *defaults

    docker:
      - image: eversc/go-pr-checks:1.16

    steps:
      - checkout

      - run:
           name: golint
           command: golint -set_exit_status $(go list ./...)

  go_build:
    <<: *defaults

    docker:
      - image: eversc/go-pr-checks:1.16

    steps:
      - checkout

      - run:
           name: go build
           command: |
             export GO111MODULE=on
             go build

  docker_build:
    <<: *defaults

    docker:
      - image: circleci/golang:1.16

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: go build
          command: |
            export GO111MODULE=on
            go build -o cloud-key-rotator ./cmd
      - run:
          name: docker build
          command: |
            docker build .


  go_test:
    <<: *defaults

    docker:
      - image: eversc/go-pr-checks:1.16

    steps:
      - checkout

      - run:
           name: go test
           command: |
             export GO111MODULE=on
             go mod download
             go test ./... -v

  e2e_test_aws:
    <<: *defaults

    docker:
      - image: eversc/aws-cli:1.16

    steps:
      - checkout

      - run:
            name: run rotate
            command: |
              export GO111MODULE=on
              go build -o cloud-key-rotator ./cmd
              chmod u+x cloud-key-rotator
              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_E2E_TEST
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_E2E_TEST
              aws secretsmanager get-secret-value --secret-id ckr-config --region eu-west-1 --query SecretString --output text > config.json
              ./cloud-key-rotator rotate
              rm config.json
              sleep 10
              if $(aws sts get-caller-identity >/dev/null 2>/dev/null); then exit 1; fi

# required due to previous builds failing only in GCP CloudFunctions (while building directly with Go works...)
  test_cloudfunction_deploy:
    <<: *docker-image
    steps:
      - checkout
      - <<: *init-credentials
      - <<: *deploy-cloudfunction

workflows:
  version: 2
  release_pipeline:
    jobs:
      - goreleaser:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - release_cloudfunction_zip:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - publish_tf_lambda_zip:
          requires:
            - goreleaser
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
  commits:
    jobs:
      - go_build
      - go_fmt:
          requires:
            - go_build
      - go_vet:
          requires:
            - go_build
      - go_cyclo:
          requires:
            - go_build
      - go_lint:
          requires:
            - go_build
      - go_test:
          requires:
            - go_build
      - tf_check_aws:
          requires:
            - go_build
      - tf_check_gcp:
          requires:
            - go_build
      - test_cloudfunction_deploy:
          requires:
            - go_build
      - e2e_test_aws:
          requires:
            - go_build
      - docker_build:
          requires:
            - go_build
  master_pipeline:
    jobs:
      - publish_aws_tf_module:
          filters:
            branches:
              only: master
      - publish_gcp_tf_module:
          filters:
            branches:
              only: master
